#!/bin/bash
red=$(tput setaf 1)
gren=$(tput setaf 2)
yellow=$(tput setaf 3)
SCPdir="/etc/newadm" && [[ ! -d ${SCPdir} ]] && exit 1
SCPusr="${SCPdir}/ger-user" && [[ ! -d ${SCPusr} ]] && mkdir ${SCPusr}
SCPfrm="/etc/ger-frm" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPinst="/etc/ger-inst" && [[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
SCPidioma="${SCPdir}/idioma"


msg () {
local colors="/etc/new-adm-color"
if [[ ! -e $colors ]]; then
COLOR[0]='\033[1;37m' #BRAN='\033[1;37m'
COLOR[1]='\e[31m' #VERMELHO='\e[31m'
COLOR[2]='\e[32m' #VERDE='\e[32m'
COLOR[3]='\e[33m' #AMARELO='\e[33m'
COLOR[4]='\e[34m' #AZUL='\e[34m'
COLOR[5]='\e[35m' #MAGENTA='\e[35m'
COLOR[6]='\033[1;36m' #MAG='\033[1;36m'
else
local COL=0
for number in $(cat $colors); do
case $number in
1)COLOR[$COL]='\033[1;37m';;
2)COLOR[$COL]='\e[31m';;
3)COLOR[$COL]='\e[32m';;
4)COLOR[$COL]='\e[33m';;
5)COLOR[$COL]='\e[34m';;
6)COLOR[$COL]='\e[35m';;
7)COLOR[$COL]='\033[1;36m';;
esac
let COL++
done
fi
NEGRITO='\e[1m'
SEMCOR='\e[0m'
 case $1 in
  -ne)cor="${COLOR[1]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}";;
  -ama)cor="${COLOR[3]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm)cor="${COLOR[3]}${NEGRITO}[!] ${COLOR[1]}" && echo -e "${cor}${2}${SEMCOR}";;
  -verm2)cor="${COLOR[1]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -azu)cor="${COLOR[6]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -verd)cor="${COLOR[2]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  -bra)cor="${COLOR[0]}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}";;
  "-bar2"|"-bar")cor="${COLOR[4]}======================================================" && echo -e "${SEMCOR}${cor}${SEMCOR}";;
 esac
}

canbio_color () {
msg -ama "$(fun_trans "Manajer konfigurasi warna") \033[1;31m[NEW-ULTIMATE]"
msg -bar2
msg -ama "$(fun_trans "Pilih 7 Warna"): "
echo -e '\033[1;37m [1] ###\033[0m'
echo -e '\e[31m [2] ###\033[0m'
echo -e '\e[32m [3] ###\033[0m'
echo -e '\e[33m [4] ###\033[0m'
echo -e '\e[34m [5] ###\033[0m'
echo -e '\e[35m [6] ###\033[0m'
echo -e '\033[1;36m [7] ###\033[0m'
msg -bar2
for number in $(echo {1..7}); do
msg -ne "$(fun_trans "Ketik warna") [$number]: " && read corselect
[[ $corselect != @([1-7]) ]] && corselect=1
cores+="$corselect "
corselect=0
done
echo "$cores" > /etc/new-adm-color
msg -bar2
}

fun_trans () { 
local texto
local retorno
declare -A texto
SCPidioma="${SCPdir}/idioma"
[[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
local LINGUAGE=$(cat ${SCPidioma})
[[ -z $LINGUAGE ]] && LINGUAGE=id
[[ $LINGUAGE = "id" ]] && echo "$@" && return
[[ ! -e /etc/texto-cr4r ]] && touch /etc/texto-cr4r
source /etc/texto-cr4r
if [[ -z "$(echo ${texto[$@]})" ]]; then
if [[ `echo "$@" | grep -o '*'` = "*" ]]; then
retorno="$(trans -e google -b id:${LINGUAGE} "$@"|sed -e 's/[^a-z0-9 -]//ig'| awk '{print toupper($0)}' 2>/dev/null)"
else
retorno="$(trans -e google -b id:${LINGUAGE} "$@"|sed -e 's/[^a-z0-9 -]//ig' 2>/dev/null)"
fi
echo "texto[$@]='${retorno}'">>/etc/texto-cr4r
echo "$retorno"
else
echo "${texto[$@]}"
fi
}



mine_port () {
local portasVAR=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
local NOREPEAT
local reQ
local Port
while read port; do
reQ=$(echo ${port}|awk '{print $1}')
Port=$(echo {$port} | awk '{print $9}' | awk -F ":" '{print $2}')
[[ $(echo -e $NOREPEAT|grep -w "$Port") ]] && continue
NOREPEAT+="$Port\n"
case ${reQ} in
squid|squid3)
[[ -z $SQD ]] && local SQD="\033[1;31mSQUID: \033[1;32m"
SQD+="$Port ";;
apache|apache2)
[[ -z $APC ]] && local APC="\033[1;31mAPACHE: \033[1;32m"
APC+="$Port ";;
ssh|sshd)
[[ -z $SSH ]] && local SSH="\033[1;31mSSH: \033[1;32m"
SSH+="$Port ";;
dropbear)
[[ -z $DPB ]] && local DPB="\033[1;31mDROPBEAR: \033[1;32m"
DPB+="$Port ";;
ss-server)
[[ -z $SSV ]] && local SSV="\033[1;31mSHADOWSOCKS: \033[1;32m"
SSV+="$Port ";;
openvpn)
[[ -z $OVPN ]] && local OVPN="\033[1;31mOPENVPN: \033[1;32m"
OVPN+="$Port ";;
stunnel4|stunnel)
[[ -z $SSL ]] && local SSL="\033[1;31mSSL: \033[1;32m"
SSL+="$Port ";;
python|python3)
[[ -z $PY3 ]] && local PY3="\033[1;31mSOCKS: \033[1;32m"
PY3+="$Port ";;
esac
done <<< "${portasVAR}"
#UDP
local portasVAR=$(lsof -V -i -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND")
local NOREPEAT
local reQ
local Port
while read port; do
reQ=$(echo ${port}|awk '{print $1}')
Port=$(echo ${port} | awk '{print $9}' | awk -F ":" '{print $2}')
[[ $(echo -e $NOREPEAT|grep -w "$Port") ]] && continue
NOREPEAT+="$Port\n"
case ${reQ} in
openvpn)
[[ -z $OVPN ]] && local OVPN="\033[0;36mOPENVPN: \033[1;32m"
OVPN+="$Port ";;
esac
done <<< "${portasVAR}"
[[ ! -z $SQD ]] && echo -e $SQD
[[ ! -z $APC ]] && echo -e $APC
[[ ! -z $SSH ]] && echo -e $SSH
[[ ! -z $DPB ]] && echo -e $DPB
[[ ! -z $OVPN ]] && echo -e $OVPN
[[ ! -z $PY3 ]] && echo -e $PY3
[[ ! -z $SSL ]] && echo -e $SSL
[[ ! -z $SSV ]] && echo -e $SSV
}
mine_port2 () {
unset portas
portas_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2"
    let i++
    }
done <<< "$portas_var"
for((i=0; i<=${#portas[@]}; i++)); do
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && break
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -ne "${texto}"
let i++
servico="$(echo ${portas[$i]}|cut -d' ' -f1)"
porta="$(echo ${portas[$i]}|cut -d' ' -f2)"
[[ -z $servico ]] && {
   echo -e " "
   break
   }
texto="\033[1;31m ${servico}: \033[1;32m${porta}"
     while [[ ${#texto} -lt 35 ]]; do
        texto=$texto" "
     done
echo -e "${texto}"
done
}
mine_port3 () {
PT=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN")
for porta in `echo -e "$PT" | cut -d: -f2 | cut -d' ' -f1 | uniq`; do
    svcs=$(echo -e "$PT" | grep -w "$porta" | awk '{print $1}' | uniq)
    echo -e "\033[1;31m$svcs: \033[1;37m$porta"
done
}
ofus () {
unset txtofus
number=$(expr length $1)
for((i=1; i<$number+1; i++)); do
txt[$i]=$(echo "$1" | cut -b $i)
case ${txt[$i]} in
".")txt[$i]="+";;
"+")txt[$i]=".";;
"1")txt[$i]="@";;
"@")txt[$i]="1";;
"2")txt[$i]="?";;
"?")txt[$i]="2";;
"3")txt[$i]="%";;
"%")txt[$i]="3";;
"/")txt[$i]="K";;
"K")txt[$i]="/";;
esac
txtofus+="${txt[$i]}"
done
echo "$txtofus" | rev
}
remove_ferramenta () {
echo -e "\033[1;31m$(fun_trans "PERHATIAN"): "
echo -e "\033[1;33m$(fun_trans "Proses ini tidak dapat dibatalkan")"
echo -e "\033[1;33m$(fun_trans "Pilih Alat yang ingin Anda hapus")"
msg -bar2
Numb=0
for arqs in $(ls ${SCPfrm}); do
float_data "$arqs" "$Numb" && {
  script[$Numb]="$arqs"
  let Numb++
  }
done
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "Kembali")"
script[0]="Kembali"
msg -bar2
selection=999
selection=$(selection_fun $Numb)
[[ -e "${SCPfrm}/${script[$selection]}" ]] && rm ${SCPfrm}/${script[$selection]} || return
}
agregar_ferramenta () {
tput cuu1 && tput dl1
msg -bar2
unset Key
echo -e "\033[1;31m$(fun_trans "PERHATIAN"): "
echo -e "\033[1;33m$(fun_trans "jangan masukkan kunci pembaruan di sini")"
echo -e "\033[1;37m$(fun_trans "Masukkan Kunci untuk Sumber Daya Baru") "
msg -bar2
while [[ -z $Key ]]; do
echo -ne "[Key/Link]: " && read Key
tput cuu1 && tput dl1
done
echo -ne "\033[1;37m$(fun_trans "Verifikasi Kunci"): "
cd ${SCPfrm}
curl "$Key" &> /dev/null
if [[ $? = "0" ]]; then
echo -e "\033[1;32m $(fun_trans "Link Valid")"
REC=$(echo $Key|awk -F"/" '{print $NF}')
echo -ne "\033[1;33m$(fun_trans "Sedang mencocokkan"): \033[1;31m[$REC]"
wget -O ${SCPfrm}/${REC} $Key &>/dev/null && echo -e "\033[1;31m- \033[1;32m$(fun_trans "Diterima")" && chmod +x ${SCPfrm}/${REC} || echo -e "\033[1;31m- \033[1;31m$(fun_trans "Gagal!")"
else
wget $(ofus "$Key") >/dev/null 2>&1 && echo -e "\033[1;32m $(fun_trans "Key Valid")" || {
    msg -verm "$(fun_trans "Kunci tidak sesuai")"
    msg -bar2
    return 0   
    }
fi
IP=$(ofus "$Key" | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
sleep 1s
[[ -e ${SCPfrm}/lista-arq ]] && {
  if [[ $(cat ${SCPfrm}/lista-arq) = "Instalasi Kunci!" ]]; then
  echo -e "\033[1;33m$(fun_trans "KUNCI INSTALASI TIDAK HARUS DIGUNAKAN DI SINI")"
  msg -bar2
  rm ${SCPfrm}/lista-arq
  return 1
  fi
  if [[ $(cat ${SCPfrm}/lista-arq) = "Kunci salah!" ]]; then
  echo -e "\033[1;33m$(fun_trans "Kunci Salah")"
  msg -bar2
  rm ${SCPfrm}/lista-arq
  return 1
  fi
  REQUEST=$(ofus "$Key" |cut -d'/' -f2)
  for arqx in $(cat ${SCPfrm}/lista-arq); do
  echo -ne "\033[1;33m$(fun_trans "Memverifikasi.."): \033[1;31m[$arqx] "
  wget -O ${SCPfrm}/${arqx} ${IP}:81/${REQUEST}/${arqx} > /dev/null 2>&1 && echo -e "\033[1;31m- \033[1;32m$(fun_trans "Diterima")" && chmod +x ${SCPfrm}/${arqx} || echo -e "\033[1;31m- \033[1;31m$(fun_trans "Gagal!")"
  sleep 1s
  done
  rm ${SCPfrm}/lista-arq
  msg -bar2
  } 
}
limpar_caches () {
(
VE="\033[1;33m" && MA="\033[1;31m" && DE="\033[1;32m"
while [[ ! -e /tmp/abc ]]; do
A+="#"
echo -e "${VE}[${MA}${A}${VE}]" >&2
sleep 0.3s
tput cuu1 && tput dl1
done
echo -e "${VE}[${MA}${A}${VE}] - ${DE}[100%]" >&2
rm /tmp/abc
) &
echo 3 > /proc/sys/vm/drop_caches &>/dev/null
sleep 1s
sysctl -w vm.drop_caches=3 &>/dev/null
apt-get autoclean -y &>/dev/null
sleep 1s
apt-get clean -y &>/dev/null
rm /tmp/* &>/dev/null
touch /tmp/abc
sleep 0.5s
msg -bar
msg -ama "$(fun_trans "PROSES SELESAI")"
msg -bar
}

fun_bar () {
comando="$1"
 _=$(
$comando > /dev/null 2>&1
) & > /dev/null
pid=$!
while [[ -d /proc/$pid ]]; do
echo -ne " \033[1;33m["
   for((i=0; i<10; i++)); do
   echo -ne "\033[1;31m##"
   sleep 0.2
   done
echo -ne "\033[1;33m]"
sleep 1s
echo
tput cuu1
tput dl1
done
echo -e " \033[1;33m[\033[1;31m####################\033[1;33m] - \033[1;32m100%\033[0m"
sleep 1s
}
meu_ip () {
if [[ -e /etc/MEUIPADM ]]; then
echo "$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && echo "$MEU_IP2" || echo "$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}
fun_ip () {
if [[ -e /etc/MEUIPADM ]]; then
IP="$(cat /etc/MEUIPADM)"
else
MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" || IP="$MEU_IP"
echo "$MEU_IP2" > /etc/MEUIPADM
fi
}
fun_eth () {
eth=$(ifconfig | grep -v inet6 | grep -v lo | grep -v 127.0.0.1 | grep "encap:Ethernet" | awk '{print $1}')
    [[ $eth != "" ]] && {
    msg -bar
    msg -ama " $(fun_trans "Terapkan Sistem untuk Meningkatkan Paket Ssh?")"
    msg -ama " $(fun_trans "Opsi untuk Pengguna Tingkat Lanjut")"
    msg -bar
    read -p " [S/N]: " -e -i n sshsn
	tput cuu1 && tput dl1
           [[ "$sshsn" = @(s|S|y|Y) ]] && {
           echo -e "${cor[1]} $(fun_trans "Memperbaiki masalah paket SSH...")"
           echo -e " $(fun_trans "Qual A Taxa RX")"
           echo -ne "[ 1 - 999999999 ]: "; read rx
           [[ "$rx" = "" ]] && rx="999999999"
           echo -e " $(fun_trans "Qual A Taxa TX")"
           echo -ne "[ 1 - 999999999 ]: "; read tx
           [[ "$tx" = "" ]] && tx="999999999"
           apt-get install ethtool -y > /dev/null 2>&1
           ethtool -G $eth rx $rx tx $tx > /dev/null 2>&1
           msg -bar
           }
     }
}
os_system () {
system=$(echo $(cat -n /etc/issue |grep 1 |cut -d' ' -f6,7,8 |sed 's/1//' |sed 's/      //'))
echo $system|awk '{print $1, $2}'
}

hapusShadowsocks () {
msg -ama " $(fun_trans "Menghapus shadowsocks")"
systemctl disable shadowsocks &>/dev/null
systemctl stop shadowsocks &>/dev/null
apt --purge remove libshadowsocks-libev -y &>/dev/null
rm -fr /etc/shadowsocks-libev &>/dev/null
rm -f /usr/local/bin/ss-local &>/dev/null
rm -f /usr/local/bin/ss-tunnel &>/dev/null
rm -f /usr/local/bin/ss-server &>/dev/null
rm -f /usr/local/bin/ss-manager &>/dev/null
rm -f /usr/local/bin/ss-redir &>/dev/null
rm -f /usr/local/bin/ss-nat &>/dev/null
rm -f /usr/local/bin/v2ray-plugin &>/dev/null
rm -f /usr/local/lib/libshadowsocks-libev.a &>/dev/null
rm -f /usr/local/lib/libshadowsocks-libev.la &>/dev/null
rm -f /usr/local/include/shadowsocks.h &>/dev/null
rm -f /usr/local/lib/pkgconfig/shadowsocks-libev.pc &>/dev/null
rm -f /usr/local/share/man/man1/ss-local.1 &>/dev/null
rm -f /usr/local/share/man/man1/ss-tunnel.1 &>/dev/null
rm -f /usr/local/share/man/man1/ss-server.1 &>/dev/null
rm -f /usr/local/share/man/man1/ss-manager.1 &>/dev/null
rm -f /usr/local/share/man/man1/ss-redir.1 &>/dev/null
rm -f /usr/local/share/man/man1/ss-nat.1 &>/dev/null
rm -f /usr/local/share/man/man8/shadowsocks-libev.8 &>/dev/null
rm -fr /usr/local/share/doc/shadowsocks-libev &>/dev/null
rm -f /usr/lib/systemd/system/shadowsocks.service &>/dev/null
msg -ama " $(fun_trans "Menghapus shadowsocks Selesai")"
msg -bar
}

hapusSquid () {
if [[ -e /etc/squid/squid.conf ]]; then
var_squid="/etc/squid/"
elif [[ -e /etc/squid3/squid.conf ]]; then
var_squid="/etc/squid3/"
fi
[[ -e $var_squid ]] && {
  msg -ama " $(fun_trans "Hapus SQUID*")"
  systemctl disable squid &>/dev/null
  systemctl disable squid3 &>/dev/null
  service squid stop > /dev/null 2>&1
  service squid3 stop > /dev/null 2>&1
  apt --purge remove squid3 -y &>/dev/null
  apt --purge remove squid -y &>/dev/null
  msg -ama " $(fun_trans "Menghapus SQUID Selesai")"
  msg -bar
  [[ -e $var_squid ]] && rm -rf $var_squid
  }
}

hapusStunnel () {
var_stunnel="/etc/stunnel"
msg -ama " $(fun_trans "Hapus Stunnel")"
systemctl disable stunnel4 &>/dev/null
service stunnel4 stop > /dev/null 2>&1
apt --purge remove stunnel4 -y &>/dev/null
rm -rf /etc/stunnel &>/dev/null
msg -ama " $(fun_trans "Menghapus Stunnel Selesai")"
msg -bar
[[ -e $var_squid ]] && rm -rf $var_stunnel
}

hapusOpenvpn() {
msg -ama " $(fun_trans "Penghapusan OPENVPN*")"
killall openvpn 2>/dev/null
systemctl disable openvpn &>/dev/null
systemctl stop openvpn >/dev/null 2>&1 & 
if [[ "$OS" = 'debian' ]]; then
fun_bar "apt-get remove --purge -y openvpn*"
else
fun_bar "yum remove openvpn -y"
fi
tuns=$(cat /etc/modules | grep -v tun) && echo -e "$tuns" > /etc/modules
rm -rf /etc/openvpn &>/dev/null&& rm -rf /usr/share/doc/openvpn* &>/dev/null
rm -rf /etc/default/openvpn &>/dev/null
rm -rf $(whereis openvpn)
msg -ama " $(fun_trans "Penghapusan Selesai!")"
msg -bar
}

hapusDropbear(){
echo -e "\033[1;32m Menghapus DROPBEAR$barra"
systemctl disable dropbear > /dev/null 2>&1
service dropbear stop > /dev/null 2>&1
fun_bar "apt --purge remove dropbear -y"
echo -e "$barra\n\033[1;32m Dropbear Terhapus!$barra"
rm -rf /etc/default/dropbear &>/dev/null
[[ -e /etc/default/dropbear ]] && rm -rf /etc/default/dropbear
msg -bar
}

remove_script () {
msg -ama "$(fun_trans "Konfirmasi penghapusan total Script")?"
msg -bar
while [[ ${yesno} != @(s|S|y|Y|n|N) ]]; do
read -p "[S/N]: " yesno
tput cuu1 && tput dl1
done
if [[ ${yesno} = @(s|S|y|Y) ]]; then
hapusShadowsocks
hapusSquid
hapusStunnel
hapusOpenvpn
hapusDropbear
rm /bin/menu &>/dev/null
rm /usr/bin/menu &>/dev/null
rm /usr/bin/trans &>/dev/null
cd $HOME
msg -ama "$(fun_trans "Script sukses dihapus")?"
msg -bar
rm -rf ${SCPdir} &>/dev/null
rm -rf ${SCPusr} &>/dev/null
rm -rf ${SCPfrm} &>/dev/null
rm -rf ${SCPinst} &>/dev/null
fi
}

# Menu Ferramentas
systen_info () {
msg -ama "$(fun_trans "Detail sistem")"
null="\033[1;31m"
if [ ! /proc/cpuinfo ]; then msg -verm "$(fun_trans "Sistem Tidak Didukung")" && msg -bar; return 1; fi
if [ ! /etc/issue.net ]; then msg -verm "$(fun_trans "Sistem Tidak Didukung")" && msg -bar; return 1; fi
if [ ! /proc/meminfo ]; then msg -verm "$(fun_trans "Sistem Tidak Didukung")" && msg -bar; return 1; fi
totalram=$(free | grep Mem | awk '{print $2}')
usedram=$(free | grep Mem | awk '{print $3}')
freeram=$(free | grep Mem | awk '{print $4}')
swapram=$(cat /proc/meminfo | grep SwapTotal | awk '{print $2}')
system=$(cat /etc/issue.net)
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
based=$(cat /etc/*release | grep ID_LIKE | awk -F "=" '{print $2}')
processor=$(cat /proc/cpuinfo | grep "model name" | uniq | awk -F ":" '{print $2}')
cpus=$(cat /proc/cpuinfo | grep processor | wc -l)
msg -bar
msg -ama "$(fun_trans "Nama sistem"): ${null}$(hostname)"
[[ "$system" ]] && msg -ama "$(fun_trans "Sistem"): ${null}$system" || msg -ama "$(fun_trans "Sistem"): ${null}???"
msg -ama "$(fun_trans "Ip Server"): ${null}$(ip addr | grep inet | grep -v inet6 | grep -v "host lo" | awk '{print $2}' | awk -F "/" '{print $1}')"
msg -ama "$(fun_trans "Versi Kernel"): ${null}$(uname -r)"
[[ "$based" ]] && msg -ama "$(fun_trans "Berbasis"): ${null}$based" || msg -ama "$(fun_trans "Berbasis"): ${null}???"
msg -bar
[[ "$processor" ]] && msg -ama "$(fun_trans "Prosessor"): ${null}$processor x$cpus" || msg -ama "$(fun_trans "Prosessor"): ${null}???"
[[ "$clock" ]] && msg -ama "$(fun_trans "CPU"): ${null}$clock MHz" || msg -ama "$(fun_trans "CPU"): ${null}???"
msg -ama "$(fun_trans "Arch"): ${null}$(uname -m)"
msg -ama "$(fun_trans "Penggunaan Prosessor"): ${null}$(ps aux  | awk 'BEGIN { sum = 0 }  { sum += sprintf("%f",$3) }; END { printf " " "%.2f" "%%", sum}')"
msg -bar
msg -ama "$(fun_trans "Total Memory Virtual"): ${null}$(($totalram / 1024))"
msg -ama "$(fun_trans "Memori Virtual Sedang Digunakan"): ${null}$(($usedram / 1024))"
msg -ama "$(fun_trans "Memori Virtual Gratis"): ${null}$(($freeram / 1024))"
msg -ama "$(fun_trans "Memori Swap Virtual"): ${null}$(($swapram / 1024))MB"
msg -bar
msg -ama "$(fun_trans "Waktu Online"): ${null}$(uptime)"
msg -bar
return 0
}
float_data () {
ofc="\033[0m${gren}(#OFC)"
dev="\033[0m${gren}(#DEV)"
case $1 in
# Menu Instala��o Ger-Frm OFC
"ADMbot.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "BOT MANAJEMEN TELEGRAM*") $ofc";;
"apacheon.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "BAGIKAN FILE ONLINE*") $ofc";;
"ports.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "MANAJEMEN PORT*") $ofc";;
"speed.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "TES KECEPATAN*") $ofc";;
"utils.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "(Badvpn/tcpspeed/squidcache/torrent) $ofc";;
# Menu Instala��o Ger-Frm OFC
"MasterBin.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "KONSULTASIKAN BIN*") $ofc";;
"payySND.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PAYLOAD GROSS FORK PYTHON*") $ofc";;
# Menu Instala��o Ger-Frm NO OFICIAL DEV
"ultrahost")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "SUBDOMAIN SCANNER*") $dev";;
"criar_pay.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "GENERATOR PAYLOAD*") $dev";;
"optimizar.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "MENGOPTIMALKAN SISTEM*") $dev";;
"gestor.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "KELOLA SERVER VPS*") $dev";;
"proxy_manager.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PROXY MANAGER*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
"toolsdownloadmanager.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "TOOLS DOWNLOAD MANAGER*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
# Menu Instala��o Download-tools DEV
"paysnd.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PAYLOAD FORC BRUT BASH*") $dev";;
"fai2ban.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PERLINDUNGAN FAIL2BAN*") $dev";;
"dados.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "MONITOR KONSUMSI*") $dev";;
"insta_painel")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "EHI UPLOAD PANEL*") $dev";;
"vnc.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "VNC SERVER*") $dev";;
"GENERADOR_BIN.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "GENERATOR BIN*") $dev";;
"ddos.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "ANTI DDOS*") $dev";;
"panelsshplus.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "SALES PANEL SSHPLUS*") $dev";;
"Crear-Demo.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PENGGUNA SEMENTARA*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
"squidpass.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "BUAT PASSWORD PADA SQUID*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
"real-host.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "EXTRAC HOST*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
"mega.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "MEGA DOWNLOAD*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
"speed_v2.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "TES KECEPATAN*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
"torrent")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "FIREWALL BLOK TORRENT*") \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
# Menu Instala��o Ger-tools DEV
"statusdesistema.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "(Nload/htop/statusvps/nettools) \033[1;33m(\033[1;37mBETA\033[1;33m) $dev";;
# Menu Instala��o Ger-tools DEV
"nload.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "LALU LINTAS RED NLOAD*") $dev";;
"htop.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "PROSES SISTEM HTOP*") $dev";;
"visorpuertos.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "STATUS SISTEM*") $dev";;
"nettools")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "NET TOOLS TARGET*") $dev";;
# Menu Instala��o Ger-Inst OFC
"openssh.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "OPENSSH $(pid_inst sshd)";;
"squid.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SQUID $(pid_inst squid)";;
"dropbear.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "DROPBEAR $(pid_inst dropbear)";;
"openvpn.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "OPENVPN $(pid_inst openvpn)";;
"ssl.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SSL $(pid_inst stunnel4)";;
"shadowsocks.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SHADOWSOCKS $(pid_inst ss-server)";;
"sockspy.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "SOCKS PYTHON $(pid_inst python)";;
"wireguard.sh")echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "WIREGUARD $(pid_inst wireguard)";;
# Menu Instala��o Ger-Inst DEV
"PDirect.py")return 1;;
"PGet.py")return 1;;
"POpen.py")return 1;;
"PPriv.py")return 1;;
"PPub.py")return 1;;
"speedtest.py")return 1;;
*)echo -ne "$(msg -verd "[$2]") $(msg -verm2 ">") " && msg -azu "${1^^} \033[1;33m($(fun_trans "Tanpa deskripsi")!)";;
esac
}

ferramentas_fun () {
tput cuu1 && tput dl1
msg -bar2
msg -ama "$(fun_trans "MENU ALAT*")"
msg -bar2
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "KEMBALI")"
script[0]="Kembali"
local Numb=1
for arqs in $(ls ${SCPfrm}); do
float_data "$arqs" "$Numb" && {
  script[$Numb]="$arqs"
  let Numb++
  }
done
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "Rincian sistem*") $ofc"
script[$Numb]="systeminf"
let Numb++
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") " && msg -azu "$(fun_trans "Bersihkan CACHE*") $ofc"
script[$Numb]="limpar"
let Numb++
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") $(msg -ama "[!]") " && msg -verd "$(fun_trans "Tambahkan Alat*")"
script[$Numb]="agregar"
let Numb++
echo -ne "$(msg -verd "[$Numb]") $(msg -verm2 ">") $(msg -ama "[!]") " && msg -verm2 "$(fun_trans "Hapus Alat*")"
script[$Numb]="remove"
msg -bar2
selection=$(selection_fun $Numb)
[[ -e "${SCPfrm}/${script[$selection]}" ]] && {
  ${SCPfrm}/${script[$selection]} ${id}
  } || {
  case ${script[$selection]} in
  "agregar")agregar_ferramenta;;
  "remove")remove_ferramenta;;
  "limpar")limpar_caches;;
  "systeminf")systen_info;;
  *)return 0;;
  esac
  }  
}

# Menu Instala��o
pid_inst () {
[[ $1 = "" ]] && echo -e "\033[1;31moff" && return 0
unset portas
portas_var=$(lsof -V -i -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND")
i=0
while read port; do
var1=$(echo $port | awk '{print $1}') && var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
[[ "$(echo -e ${portas[@]}|grep "$var1 $var2")" ]] || {
    portas[$i]="$var1 $var2\n"
    let i++
    }
done <<< "$portas_var"
[[ $(echo "${portas[@]}"|grep "$1") ]] && echo -e "\033[1;32m(Aktif)" || echo -e "\033[1;31m(Mati)"
}

menu_inst () {
export -f fun_eth
export -f fun_bar
menuTXT="$(fun_trans "Kembali*")"
msg -bar
msg -ama "$(fun_trans "Menu Instalasi")"
msg -bar
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$menuTXT"
local Numb=1
for arqs in $(ls ${SCPinst}); do
float_data "$arqs" "$Numb" && {
  script[$Numb]="$arqs"
  let Numb++
  }
done
msg -bar
script[0]="Kembali"
selection=999
selection=$(selection_fun $Numb)
[[ -e "${SCPinst}/${script[$selection]}" ]] && {
  ${SCPinst}/${script[$selection]} ${id}
  } || return 0
}
# MENU FLUTUANTE
menu_func () {
local options=${#@}
local array
for((num=1; num<=$options; num++)); do
echo -ne "$(msg -verd "[$num]") $(msg -verm2 ">") "
  array=(${!num})
  case ${array[0]} in
    "-vd")msg -verd "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
    "-vm")msg -verm2 "$(fun_trans "${array[@]:1}")" | sed ':a;N;$!ba;s/\n/ /g';;
    "-fi")msg -azu "$(fun_trans "${array[@]:2}") ${array[1]}" | sed ':a;N;$!ba;s/\n/ /g';;
    *)msg -azu "$(fun_trans "${array[@]}")" | sed ':a;N;$!ba;s/\n/ /g';;
  esac
done
}

# Sistem DE SELECAO
selection_fun () {
local selection="null"
local range
for((i=0; i<=$1; i++)); do range[$i]="$i "; done
while [[ ! $(echo ${range[*]}|grep -w "$selection") ]]; do
echo -ne "\033[1;37m$(fun_trans "Pilih Opsi"): " >&2
read selection
tput cuu1 >&2 && tput dl1 >&2
done
echo $selection
}
# Eksekusi MENU
export -f msg
export -f selection_fun
export -f fun_trans
export -f  menu_func
export -f meu_ip
export -f fun_ip
clear
msg -bar
msg -ama "Port Aktif dan Informasi Server     \033[1;31m[\033[1;37m r6.3.4 \033[1;31m] "
msg -bar
mine_port3
msg -bar
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$system")
_hora=$(printf '%(%H:%M:%S)T')
_hoje=$(date +'%d/%m/%Y')
echo -e "\033[1;32mSISTEM            MEMORI RAM          PROSESSOR "
echo -e "\033[1;31mDate: \033[1;37m$_hoje  \033[1;31mTotal:\033[1;37m$_ram    \033[1;31mCore: \033[1;37m$_core\033[0m"
echo -e "\033[1;31mJam : \033[1;37m$_hora    \033[1;31mDigunakan: \033[1;37m$_usor \033[1;31mDigunakan: \033[1;37m$_usop\033[0m"
_hora=$(printf '%(%H:%M:%S)T')
_total=$(awk  -F : '$3 >= 500 {print  $1}'  /etc/passwd | grep -v "nobody" | sort | wc -l)
msg -bar

msg -ne "$(fun_trans "Sistem"): " && echo -ne "\033[1;37m$(os_system)  "
msg -ne "$(fun_trans "IP"): " && echo -e "\033[1;37m$(meu_ip)"
[[ -e ${SCPdir}/USRonlines ]] && msg -bar && msg -ne "$(fun_trans "ONLINE*"): " && echo -ne "\033[1;37m$(cat ${SCPdir}/USRonlines) $(fun_trans "Pengguna")  "
[[ -e ${SCPdir}/USRexpired ]] && msg -ne "$(fun_trans "EXPIRED*"): " && echo -e "\033[1;37m$(cat ${SCPdir}/USRexpired) $(fun_trans "Pengguna")"
[[ -e ${SCPdir}/message.txt ]] && msg -bar && msg -bra "Pesan: $(cat ${SCPdir}/message.txt)"
_hora=$(printf '%(%H:%M:%S)T')
_total=$(awk  -F : '$3 >= 500 {print  $1}'  /etc/passwd | grep -v "nobody" | sort | wc -l)
msg -bar
msg -ama "$(fun_trans "Pengelola*") \033[1;31m[\033[1;32m cr4r \033[1;31m] \033[1;31mWaktu: \033[1;37m$_hora \033[1;31mPengguna: \033[1;37m$_total"
msg -bar
echo -ne "$(msg -verd "[0]") $(msg -verm2 ">") " && msg -bra "$(fun_trans "Keluar")"
menu_func "KELOLA PENGGUNA" "KELOLA ALAT" "[!] HAPUS SEMUA TOOL" "GANTI WARNA" "MENU INSTALASI"
msg -bar
# FIM
selection=$(selection_fun 6)
case ${selection} in
0)cd $HOME && exit 0;;
1)${SCPusr}/usercodes "${idioma}";;
2)ferramentas_fun;;
3)remove_script;;
4)canbio_color;;
5)menu_inst;;
esac
msg -ne "$(fun_trans "Enter Untuk Melanjutkan")" && read enter
${SCPdir}/menu
